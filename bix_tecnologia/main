import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score

# Load the datasets
previous_years_df = pd.read_csv('/mnt/data/air_system_previous_years.csv')
present_year_df = pd.read_csv('/mnt/data/air_system_present_year.csv')

# Handle missing values by filling with the mean
previous_years_df.fillna(previous_years_df.mean(), inplace=True)
present_year_df.fillna(present_year_df.mean(), inplace=True)

# Encode the target variable
previous_years_df['class'] = previous_years_df['class'].map({'pos': 1, 'neg': 0})
present_year_df['class'] = present_year_df['class'].map({'pos': 1, 'neg': 0})

# Split the data into features and target
X = previous_years_df.drop('class', axis=1)
y = previous_years_df['class']

# Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Perform PCA for dimensionality reduction
pca = PCA(n_components=20)
X_pca = pca.fit_transform(X_scaled)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)

# Train a Random Forest model
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)

# Predict on the test set
y_pred = rf_model.predict(X_test)
y_proba = rf_model.predict_proba(X_test)[:, 1]

# Evaluate the model
print("Classification Report:")
print(classification_report(y_test, y_pred))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print(f"ROC-AUC Score: {roc_auc_score(y_test, y_proba):.4f}")


# Feature importance
importances = rf_model.feature_importances_
features = X.columns[:20]  # Assuming first 20 features are used in PCA

print("\nFeature Importances:")
for i, imp in enumerate(importances):
    print(f"Feature {i+1}: {imp:.4f}")

# Financial impact analysis
def calculate_cost_savings(y_true, y_pred):
    inspection_cost = 10
    preventive_cost = 25
    corrective_cost = 500

    true_pos = ((y_true == 1) & (y_pred == 1)).sum() * preventive_cost
    false_pos = ((y_true == 0) & (y_pred == 1)).sum() * inspection_cost
    false_neg = ((y_true == 1) & (y_pred == 0)).sum() * corrective_cost
    
    total_cost = true_pos + false_pos + false_neg
    return total_cost

original_cost = calculate_cost_savings(y_test, np.ones_like(y_test))  # Assuming all are sent for corrective maintenance
predicted_cost = calculate_cost_savings(y_test, y_pred)

print(f"\nOriginal Cost: ${original_cost}")
print(f"Predicted Cost: ${predicted_cost}")
print(f"Cost Savings: ${original_cost - predicted_cost}")


import joblib

# Save the model, scaler, and PCA components
joblib.dump(rf_model, 'rf_model.pkl')
joblib.dump(scaler, 'scaler.pkl')
joblib.dump(pca, 'pca.pkl')

print("Model, scaler, and PCA components saved for deployment.")
